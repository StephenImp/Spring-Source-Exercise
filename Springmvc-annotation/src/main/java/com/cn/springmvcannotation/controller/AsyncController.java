package com.cn.springmvcannotation.controller;

import java.util.UUID;
import java.util.concurrent.Callable;

import com.cn.springmvcannotation.service.DeferredResultQueue;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.async.DeferredResult;



@Controller
public class AsyncController {
	
	
	@ResponseBody
	@RequestMapping("/createOrder")
	public DeferredResult<Object> createOrder(){
		DeferredResult<Object> deferredResult = new DeferredResult<>((long)3000, "create fail...");
			
		DeferredResultQueue.save(deferredResult);
		
		return deferredResult;
	}
	
	
	@ResponseBody
	@RequestMapping("/create")
	public String create(){
		//????????
		String order = UUID.randomUUID().toString();
		DeferredResult<Object> deferredResult = DeferredResultQueue.get();
		deferredResult.setResult(order);
		return "success===>"+order;
	}
	
	/**
	 * 1????????????Callable
	 * 2??Spring????????Callable ???? TaskExecutor ????????????????????
	 * 3??DispatcherServlet?????ะต?Filter???web??????????????response ?????????
	 * 4??Callable????????SpringMVC???????????????????????????????
	 * 5??????Callable?????????SpringMVC????????????????????????????-??????????
	 * 
	 * preHandle.../springmvc-annotation/async01
		???????...Thread[http-bio-8081-exec-3,5,main]==>1513932494700
		????????...Thread[http-bio-8081-exec-3,5,main]==>1513932494700
		=========DispatcherServlet?????ะต?Filter??????============================
		
		================???Callable???==========
		???????...Thread[MvcAsync1,5,main]==>1513932494707
		???????...Thread[MvcAsync1,5,main]==>1513932496708
		================Callable??????==========
		
		================?????????????????????========
		preHandle.../springmvc-annotation/async01
		postHandle...??Callable???????????????????????????
		afterCompletion...
		
		??????????:
			1???????API??AsyncListener
			2????SpringMVC?????AsyncHandlerInterceptor??
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/async01")
	public Callable<String> async01(){
		System.out.println("???????..."+Thread.currentThread()+"==>"+System.currentTimeMillis());
		
		Callable<String> callable = new Callable<String>() {
			@Override
			public String call() throws Exception {
				System.out.println("???????..."+Thread.currentThread()+"==>"+System.currentTimeMillis());
				Thread.sleep(2000);
				System.out.println("???????..."+Thread.currentThread()+"==>"+System.currentTimeMillis());
				return "Callable<String> async01()";
			}
		};
		
		System.out.println("????????..."+Thread.currentThread()+"==>"+System.currentTimeMillis());
		return callable;
	}

}
