手写实现JDK动态代理
不仅知其然，还得知其所以然。既然JDK动态代理功能如此强大，那么它是如何实现的呢？
我们现在来探究一下原理，并模仿JDK动态代理动手写一个属于自己的动态代理。
我们都知道JDK动态代理采用字节重组，重新生成对象来替代原始对象，以达到动态代理的目的。 JDK动态代理生成对象的步骤如下：
（1）获取被代理对象的引用，并且获取它的所有接口，反射获取。
（2） JDK动态代理类重新生成一个新的类，同时新的类要实现被代理类实现的所有接口。
（3）动态生成Java代码，新加的业务逻辑方法由一定的逻辑代码调用（在代码中体现）。
（4）编译新生成的Java代码.class文件。
（5）重新加载到JVM中运行。

以上过程就叫字节码重组。
JDK中有一个规范，在ClassPath下只要是$开头的.class文件，一般都是自动生成的。
那么我们有没有办法看到代替后的对象的“真容”呢？
做一个这样测试，我们将内存中的对象字节码通过文件流输出到一个新的.class文件，然后利用反编译工具查看其源代码。